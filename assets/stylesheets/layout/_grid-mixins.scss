@import "../utils/group";
@import "grid-functions";

// Grid initialisation
// -------------------
$grid-gutter:         grid-column-gutter($grid-size, $grid-desired-gutter);
$grid-half-gutter:    $grid-gutter / 2;
$grid-column:         grid-column-width($grid-size, $grid-total-columns, $grid-gutter);


// Mixins
// ------

// Grid container to set grid bounds
@mixin grid-container($width: $grid-size) {
  @include group;

  width: $width;
  margin: {
    left: auto;
    right: auto;
  }
}

// Grid row
// $type: <pixel|fluid>
@mixin grid-row($type: $grid-type) {
  @include group;
  @include grid-column-margins($type, -1);
}

// Converts into grid column
// $variation - can be normal, last, end, inner or centered
@mixin grid-column($type: $grid-type) {
  @include box-sizing(border-box);
  min-height: 1px;
  float: left;
}

// Column margins
// $modifier: 1   - normal column margins
// $modifier: -1  - negative row margins
@mixin grid-column-margins($type: $grid-type, $modifier: 1) {
  $v-gutter:   auto;

  @if($type == fluid) {
    $v-gutter: grid-percentage($grid-half-gutter * $modifier);
  } @else if ($type == pixel) {
    $v-gutter: $grid-half-gutter * $modifier;
  }

  margin-left:  $v-gutter;
  margin-right: $v-gutter;
}

// Calculate single column width (in pixels) multipled by number of columns it spans (indluding gutters)
@mixin grid-column-width($span: 1, $type: $grid-type, $gutter: $grid-gutter) {
  $v-col-width: auto;

  @if($type == pixel) {
    $v-col-width: grid-columns-width($span, $grid-column, $gutter);
  } @else if($type == fluid) {
    $v-col-width: grid-percentage(grid-columns-width($span, $grid-column, $gutter));
  }

  width: $v-col-width;
}


// TODO simplify
// Calculate offset width based on number of columns it spans (including gutters)
@mixin grid-offset-by-column($span: 1, $direction: left, $type: positive, $first: false) {
  $v-offset: 0;

  @if $type == positive {
    // normal offset
    $v-offset: grid-columns-width($span, $grid-column, $grid-gutter) + ($grid-gutter * 3 / 2);
  } @else {
    // negative offset
    // left
    @if $direction == left {
      $v-offset: -(grid-columns-width($span, $grid-column, $grid-gutter) + ($grid-gutter));
      @if $first {
        $v-offset: $v-offset + $grid-half-gutter;
      }
    // right
    } @else {
      $v-offset: -(grid-columns-width($span, $grid-column, $grid-gutter) + ($grid-gutter / 2));
      margin-left: abs($v-offset) + $grid-gutter * 3 / 2;
    }
  }

  margin-#{$direction}: $v-offset;
}
