// Semantic grid components
// ========================

// These placeholder selectors can be used to convert any element into
// grid component. To use extend element with appropriate placeholder.
// It will automatically take care of the parent and descending components
// as long as the correct grid components are used.

// You should think about this file as mapping between your styles and
// grid mixins and functions that calculate your individual grid elements
// from parameters you provide. It doesn't contain any values.

// The structure of the grid is as follows:

// %l-container           –  A grid is always contained in one of these
//                           They use global grid settings and can be overriden with:
//    %l-grid-pixel       –  Force pixel grid
//    %l-grid-fluid       –  Force fluid grid
//    %l-gutterless       –  Collapse column margins (gutters)
//
// %l-row                 –  Grid consists of a number of rows
//                           They are required for correct column margins, but can be omitted,
//                           in which case the grid with no `%l-row` becomes gutterless
//
// %l-col                 –  Column, the unit of the grid
//    %l-col-<$i>         –  Column size (e.g. `%l-col-4` spans four single columns, including three gutters)
//    %l-col-<n>-of-<n>   -  Fractional column size of parent total (e.g. 2-of-8 is 2/8 and equals 25%)
//    %l-col-center       -  Center column
//
// l-col-pull-<$i>        –  Pull column to left by <column size>
// l-col-push-<$i>        –  Push column to right by <column size>
//
// %l-last-col-right      –  This settings forces last column to float to right, which helps to eliminate
//                           pixel gap caused by rounding in fluid grids and ensures first and last column
//                           occupy full width of grid container.
//                           Applied to grid container (@extend).

// For examples of usage of these components see `scaffolding.scss` file.


// # Individual grid components

// Grid container
%l-container {
  @include grid-container;

  // Grid row
  %l-row {
    @include grid-row;
  }

  // Grid column
  %l-col {
    @include grid-column;
  }
}

// - Optional
// Override default grid type
@if $grid-overrides {
  // Defines grid row of forced fluid grid
  %l-grid-fluid > %l-row {
    @include grid-row(fluid);
  }
  // Defines grid row of forced pixel grid
  %l-grid-pixel > %l-row {
    @include grid-row(pixel);
  }
}

// - Optional
// Nested grids
@if $grid-nested-grids {
  %l-container {
    // Defines inner grid container (nested grid)
    %l-container {
      width: auto;
    }

    // Always set nested grids to fluid
    &%l-container %l-container > %l-row, {
      @include grid-row(fluid);
    }
  }
}


// Placeholder for gutterless columns
%-drop-margins {
  @include grid-column-margins(0);
}

%l-container {
  // Gutterless row
  %l-gutterless,
  %l-gutterless %l-row {
    @extend %-drop-margins;
  }

  // Gutterless columns
  > %l-col,
  %l-gutterless %l-col {
    @extend %-drop-margins;
  }
}


// - Optional
// Grid overrides
@if $grid-overrides {
  %l-pixel %l-col {
    @include grid-column-margins(pixel);
  }
  %l-fluid %l-col {
    @include grid-column-margins(fluid);
  }
}

// Float last column to right if `%l-last-col-right` extended
// Applied to `%l-container`
%l-col + %l-col:last-child {
  %l-last-col-right%l-container > &,
  %l-last-col-right%l-container > %l-row & {
    float: right;
  }
}

// Column spans
@for $i from 1 through $grid-total-columns {
  %l-col-#{$i} {
    @include grid-column-width($i, $grid-type);

    @if $grid-overrides {
      // Force pixel grid
      %l-grid-pixel > %l-row > & {
        @include grid-column-width($i, pixel);
      }
      %l-grid-pixel > &,
      %l-grid-pixel > %l-gutterless & {
        @include grid-column-width($i, pixel, $gutter: 0);
      }

      // Force fluid grid
      %l-grid-fluid & {
        @include grid-column-width($i, fluid);
      }
      %l-grid-fluid > &,
      %l-grid-fluid > %l-gutterless & {
        @include grid-column-width($i, fluid, $gutter: 0);
      }
    }

    // Force gutterless grid
    %l-gutterless &,
    // Apply gutterless grid on columns without rows
    %l-container > & {
      @include grid-column-width($i, $grid-type, $gutter: 0);
    }

    @if $grid-nested-grids {
      // TODO (fix inconsistent gutters betweeen pixel and fluid grids)
      // Nested rows (for fluid grids)
      // Since percentage value takes into account its parent container
      // we need to adjust total column count to get the correct calculations
      %l-grid-fluid & {
        @for $n from 1 through $grid-total-columns {
          %l-row %l-col-#{$n} {
            @include grid-column-width($n, fluid, $total-columns: $i);
          }
        }
      }
      @if $grid-type == fluid {
        @for $n from 1 through $grid-total-columns {
          %l-row %l-col-#{$n} {
            @include grid-column-width($n, fluid, $total-columns: $i);
          }
        }
      }
    }
  }
}


// Defines column margins
// Only applied to descendants of rows
%l-row %l-col {
  @include grid-column-margins;
}


// Centre column
%l-col-center {
  %l-container  &,
  %l-grid-pixel &,
  %l-grid-fluid &,
  %l-gutterless & {
    float: none;
    margin-left: auto;
    margin-right: auto;
  }
}


// - Optional
// Column subdivisions
@if $grid-subdivisions {
  @for $i from 1 through $grid-total-columns {
    @for $n from 1 through $grid-total-columns {
      %l-col-#{$i}-of-#{$n} {
        @include grid-column-width($i, fluid, $gutter: 0, $total-columns: $n);
      }
    }
  }
}


// - Optional
// Column offsets
@if $grid-offsets {

  %l-col-positioned {
    position: relative;
  }

  %l-container {
    > %l-row {
      @for $i from 1 through $grid-total-columns {
        %l-col-pull-#{$i} {
          @extend %l-col-positioned;
          @include grid-column-offset(left, $i);
        }

        %l-col-push-#{$i} {
          @extend %l-col-positioned;
          @include grid-column-offset(right, $i);
        }
      }
    }
    &%l-grid-pixel > %l-row {
      @for $i from 1 through $grid-total-columns {
        %l-col-pull-#{$i} {
          @include grid-column-offset(left, $i, pixel);
        }

        %l-col-push-#{$i} {
          @include grid-column-offset(right, $i, pixel);
        }
      }
    }
    &%l-grid-fluid > %l-row {
      @for $i from 1 through $grid-total-columns {
        %l-col-pull-#{$i} {
          @include grid-column-offset(left, $i, fluid);
        }

        %l-col-push-#{$i} {
          @include grid-column-offset(right, $i, fluid);
        }
      }
    }
  }
}
