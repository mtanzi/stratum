// -----------------------------------------------------------------------------
// • Pixel Grid Guides Mixins  (Tyom Semonov <mail@tyom.net>)
// -----------------------------------------------------------------------------
// » grid-show-guides($col-width: $grid-column, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
//   Renders grid guides
//    $column-width       - width of columns
//    $block-size         - height of module blocks
//    $color              - grid colour (#hex or Sass colour function)
//    $opacity            - grid opacity
//    $position:back      - place grid behind page elements
//    $position:front     - place grid in front of page elements
// -----------------------------------------------------------------------------

// Draws grid guides
// $grid-size, $block-size,$color, $opacity, $position
@mixin grid-show-guides($grid-size: $grid-medium, $block-size: 9, $color: $grid-guides-color, $opacity: $grid-guides-opacity, $position: $grid-guides-position, $grid-type: pixel) {

  $column-gutter: grid-column-gutter($grid-size, $grid-desired-gutter);
  $column-width:  grid-single-column-width($grid-size, $grid-total-columns, $column-gutter);

  @if $grid-type == flexible {
    $column-gutter: grid-calculate-percentage($column-gutter);
    $column-width:  grid-calculate-percentage($column-width);
  }

  $combined-width:  $column-width + $column-gutter;
  $block-height: (($grid-baseline + 1) * $block-size) + $grid-baseline;

  position: relative;

  &:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;

    @include background(
     // Baseline (v-rhythm)
        linear-gradient(transparent $grid-baseline, rgba(white, $opacity) $grid-baseline),
     // Columns
        linear-gradient(left, rgba($color, $opacity),
                              rgba($color, $opacity) $column-width,
                              transparent $column-width,
                              transparent $combined-width
                              ),
     // Blocks
        linear-gradient(transparent ($block-height - $grid-baseline), rgba(white, $opacity / 1.2) $grid-baseline),
     // Base colour
        linear-gradient(rgba($color, $opacity), rgba($color, $opacity))
    );
    background-size: $combined-width $grid-baseline + 1,  // v-rhythm
                     $combined-width 10px,                // column
                     $combined-width ($block-height + 1); // block

    @if $grid-type == flexible {
      // Offset column by half gutter
      background-position: 0 0, -($column-gutter/4) 0, 0 0;
    }

    // Grid placement (back by default)
    @if $position == front {
      z-index: 999;
    } @else {
      z-index: -1;
    }
  }
}

// Grid debugging
.show-grid {
  @include grid-show-guides($grid-medium);

  @include large-screen {
    @include grid-show-guides($grid-large);
  }
  &.flexible {
    @include grid-show-guides($grid-type: flexible);
  }
  &.front:before {
    z-index: auto;
  }
}

// Show grid on .container if enabled
@if $grid-guides {
  .container {
    @extend .show-grid;
    .row:before {
      display: none;
    }
  }
}
