// -----------------------------------------------------------------------------
// • Mixins
// -----------------------------------------------------------------------------
// » =grid-row($type: outer)
//   Render row
//    $type: outer       - first outer containing row
//    $type: inner       - inner container rows
//
// » =grid-column($position: normal)
//   Render column
//    $column: last      - flushed right,
//    $column: end       - last but follows previous columns
//    $column: inner     - column in inner row
//    $column: centered  - centered column
//
// » grid-offset-by-column($span: 1, $direction: left)
//   Offset column by $span columns
//    $span: <integer>    - span number of columns
//    $direction: left    - offset from left
//    $direction: right   - offset from right
//
// » =grid-column-borders($color: rgba(black, .2))
//   Render borders of children columns
//    $color: value       - border color (#hex or Sass colour function)
//
// » =grid-show-guides($col-width: $grid-column, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
//   Show grid guides on current container
//    $column-width       - width of columns
//    $block-size         - height of module blocks
//    $color              - grid colour (#hex or Sass colour function)
//    $opacity            - grid opacity
//    $position:back      - place grid behind page elements
//    $position:front     - place grid in front of page elements
// -----------------------------------------------------------------------------

// Grid inspired by Zurb's Foundation

@import "bourbon/css3/background"
@import "bourbon/functions/render-gradients"
@import "bourbon/functions/linear-gradient"

@import "functions"
@import "clearfix"
@import "responsive"


// Grid defaults
// --------

// Calculate pixel grid @ http://gridulator.com/
$grid-medium:   980px       !default
$grid-large:    1200px      !default
$grid-x-large:  1600px      !default

$grid-total-columns:  12    !default
$grid-baseline:       20px  !default
$desired-grid-gutter: 20px  !default

$grid-col-medium:   calculate-column-width($grid-medium)    !default
$grid-col-large:    calculate-column-width($grid-large)     !default
$grid-col-x-large:  calculate-column-width($grid-x-large)   !default

$grid-column: $grid-col-medium  !default

$grid-guides-color: red     !default
$grid-guides: false         !default
$grid-guides-position: back !default


// Mixins
// ------

=grid-row($type: outer)
  +clearfix
  @if $type == outer
    width: $grid-medium
    min-width: $grid-medium
    max-width: 100%

    +large-screen
      width: $grid-large
    +x-large-screen
      width: $grid-x-large

    margin:
      left: auto
      right: auto
  @else
    width: auto
    max-width: none
    margin:
      left:  -(calculate-gutter-width($grid-medium) / 2)
      right: -(calculate-gutter-width($grid-medium) / 2)
    +large-screen
      margin:
        left:  -(calculate-gutter-width($grid-large) / 2)
        right: -(calculate-gutter-width($grid-large) / 2)
    +x-large-screen
      margin:
        left:  -(calculate-gutter-width($grid-x-large) / 2)
        right: -(calculate-gutter-width($grid-x-large) / 2)


=grid-column($position: normal)
  @if $position == last
    float: right
    margin-right: 0
  @else if $position == end
    float: left
    margin-right: 0
  @else if $position == inner
    margin:
      left:  calculate-gutter-width($grid-medium) / 2
      right: calculate-gutter-width($grid-medium) / 2
    +large-screen
      margin:
        left:  calculate-gutter-width($grid-large) / 2
        right: calculate-gutter-width($grid-large) / 2
    +x-large-screen
      margin:
        left:  calculate-gutter-width($grid-x-large) / 2
        right: calculate-gutter-width($grid-x-large) / 2
  @else if $position == centered
    float: none
    margin:
      left: auto
      right: auto
  @else
    min-height: 1px
    float: left
    margin-right: calculate-gutter-width($grid-medium)
    +large-screen
      margin-right: calculate-gutter-width($grid-large)
    +x-large-screen
      margin-right: calculate-gutter-width($grid-x-large)

=grid-column-width($span: 1)
  width: column-width($span, $grid-col-medium)
  +large-screen
    width: column-width($span, $grid-col-large)
  +x-large-screen
    width: column-width($span, $grid-col-x-large)

=grid-offset-by-column($span: 1, $direction: left)
  margin-#{$direction}: column-width($span) + calculate-gutter-width($grid-medium)

=grid-column-borders($color: rgba(black, .2))
  .column, .columns
    position: relative
  .column:before, .columns:after
    content: ""
    position: absolute
    width: 1px
    left: -(calculate-gutter-width($grid-medium) / 2) + 1
    top: 0
    bottom: 0
    background: $color
  .column:after, .columns:after
    right: -(calculate-gutter-width($grid-medium) / 2) + 1
    left: auto
  .column:first-child:before, .columns:first-child:before,
  .column:last-child:after, .columns:last-child:after
    display: none

// =grid-show-guides($col-width: $grid-column, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
=grid-show-guides($grid-size: $grid-medium, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
  position: relative
  &:before
    @if $position == back
      z-index: -1

    content: ""
    position: absolute
    width: 100%
    height: 100%
    $col-width: ceil(calculate-column-width($grid-size))
    $col-gutter: calculate-gutter-width($grid-size)
    $combined-width:  $col-width + $col-gutter
    $block-height: (($grid-baseline + 1) * $block-size) + $grid-baseline

    @debug $col-width, $col-gutter, $grid-size

    // +background(linear-gradient(transparent $grid-baseline, rgba(white, $opacity/2) $grid-baseline), linear-gradient(left, fade-out($color, $opacity), fade-out($color, $opacity) $col-width, transparent $col-width, transparent $combined-width), linear-gradient(transparent ($block-height - $grid-baseline), fade-out(white, $opacity / 2) $grid-baseline), linear-gradient(fade-out($color, $opacity), fade-out($color, $opacity)))
    +background(linear-gradient(left, red, red $col-width, transparent $col-width, transparent $combined-width))
    background-size: $combined-width $grid-baseline + 1, $combined-width ($grid-baseline * $block-size), $combined-width ($block-height + 1)
    background-size: $combined-width $grid-baseline + 1
