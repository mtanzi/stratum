// -----------------------------------------------------------------------------
// • Mixins
// -----------------------------------------------------------------------------
// » =grid-row($type: outer)
//   Render row
//    $type: outer       - first outer containing row
//    $type: inner       - inner container rows
//
// » =grid-column($position: normal)
//   Render column (generic for any size)
//    $column: last      - flushed right,
//    $column: end       - last but follows previous columns
//    $column: inner     - column in inner row
//    $column: centered  - centered column
//
// » = grid-column-width($span: 1)
//   Render column (specific size)
// » grid-offset-by-column($span: 1, $direction: left)
//   Offset column by $span columns
//    $span: <integer>    - span number of columns
//    $direction: left    - offset from left
//    $direction: right   - offset from right
//
// » =grid-column-borders($color: rgba(black, .2))
//   Render borders of children columns
//    $color: value       - border color (#hex or Sass colour function)
//
// » =grid-show-guides($col-width: $grid-column, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
//   Show grid guides on current container
//    $column-width       - width of columns
//    $block-size         - height of module blocks
//    $color              - grid colour (#hex or Sass colour function)
//    $opacity            - grid opacity
//    $position:back      - place grid behind page elements
//    $position:front     - place grid in front of page elements
// -----------------------------------------------------------------------------

// Grid inspired by Zurb's Foundation

@import "bourbon/css3/background"
@import "bourbon/functions/render-gradients"
@import "bourbon/functions/linear-gradient"

@import "functions"
@import "clearfix"
@import "responsive"


// Grid defaults
// --------

// Calculate pixel grid @ http://gridulator.com/
$grid-medium:         980px   !default
$grid-large:          1200px  !default

$grid-total-columns:  12      !default
$grid-baseline:       20px    !default
$grid-desired-gutter: 20px    !default

$grid-gutter-medium:  grid-column-gutter($grid-medium, $grid-desired-gutter)
$grid-gutter-large:   grid-column-gutter($grid-large, $grid-desired-gutter)
$grid-column-medium:  grid-single-column-width($grid-medium, $grid-total-columns, $grid-gutter-medium)
$grid-column-large:   grid-single-column-width($grid-large, $grid-total-columns, $grid-gutter-large)

$grid-column: $grid-column-medium  !default

$grid-guides:            false  !default
$grid-guides-color:      red    !default
$grid-guides-opacity:    .4     !default
$grid-guides-position:   back   !default

$grid-display-column-sizes: false  !default

@debug "gutter medium:" $grid-gutter-large
@debug "column medium:" $grid-column-large

// Mixins
// ------

=grid-row($type: outer)
  +clearfix
  @if $type == outer
    width: $grid-medium
    min-width: $grid-medium
    max-width: 100%

    +large-screen
      width: $grid-large

    margin:
      left: auto
      right: auto
  @else
    width: auto
    max-width: none
    margin:
      left:  -($grid-gutter-medium / 2)
      right: -($grid-gutter-medium / 2)
    +large-screen
      margin:
        left:  -($grid-gutter-large / 2)
        right: -($grid-gutter-large / 2)


=grid-column($position: normal)
  @if $position == last
    float: right
    margin-right: 0
  @else if $position == end
    float: left
    margin-right: 0
  @else if $position == inner
    margin:
      left:  $grid-gutter-medium / 2
      right: $grid-gutter-medium / 2
    +large-screen
      margin:
        left:  $grid-gutter-large / 2
        right: $grid-gutter-large / 2
  @else if $position == centered
    float: none
    margin:
      left: auto
      right: auto
  @else
    min-height: 1px
    float: left
    margin-right: $grid-gutter-medium
    +large-screen
      margin-right: $grid-gutter-large

=grid-column-width($span: 1)
  $column-width: grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium)
  width: $column-width

  +large-screen
    $column-width: grid-column-span-width($span, $grid-column-large, $grid-gutter-large)
    width: $column-width

  @if $grid-display-column-sizes
    +grid-show-column-sizes

=grid-offset-by-column($span: 1, $direction: left)
  margin-#{$direction}: grid-column-span-width($span, $grid-column-medium, $grid-gutter-medium) + ($grid-gutter-medium * 3 / 2)
  +large-screen
    margin-#{$direction}: grid-column-span-width($span, $grid-column-large, $grid-gutter-large) + ($grid-gutter-large * 3 / 2)


=grid-column-borders($grid-size, $color: #bbb)
  .column, .columns
    position: relative
  .column:before, .columns:before,
  .column:after, .columns:after
    content: ""
    position: absolute
    width: 1px
    top: 0
    bottom: 0
    background: $color
  .column:before, .columns:before
    left: -(grid-column-gutter($grid-size, $grid-desired-gutter) / 2)
  .column:after, .columns:after
    right: -((grid-column-gutter($grid-size, $grid-desired-gutter) / 2) + 1)
  .column:first-child:before, .columns:first-child:before,
  .column:last-child:after, .columns:last-child:after
    display: none

=grid-show-column-sizes()
  .column, .columns
    position: relative
  .column:before, .columns:before
    top: 0
    left: 0
    right: 0
    text-align: center
    padding: 5px 10px
    background: rgba(white, .5)
    font-size: 12px
    color: #777
    position: absolute
    content: "#{$grid-column-medium}"

  +large-screen
    .column:before
      display: block !important
      content: "#{$grid-column-large}"

=grid-show-guides($grid-size: $grid-medium, $block-size: 9, $color: $grid-guides-color, $opacity: $grid-guides-opacity, $position: $grid-guides-position)
  position: relative
  &:before
    @if $position == back
      z-index: -1
    @else
      z-index: 999

    content: ""
    position: absolute
    width: 100%
    height: 100%
    $column-gutter: grid-column-gutter($grid-size, $grid-desired-gutter)
    $column-width:  grid-single-column-width($grid-size, $grid-total-columns, $column-gutter)
    $combined-width:  $column-width + $column-gutter
    $block-height: (($grid-baseline + 1) * $block-size) + $grid-baseline

    +background(linear-gradient(transparent $grid-baseline, rgba(white, $opacity / 1.8) $grid-baseline), linear-gradient(left, rgba($color, $opacity), rgba($color, $opacity) $column-width, transparent $column-width, transparent $combined-width), linear-gradient(transparent ($block-height - $grid-baseline), rgba(white, $opacity / 1.8) $grid-baseline), linear-gradient(rgba($color, $opacity), rgba($color, $opacity)))
    background-size: $combined-width $grid-baseline + 1, $combined-width ($grid-baseline * $block-size), $combined-width ($block-height + 1)
