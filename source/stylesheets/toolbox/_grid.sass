@import "bourbon/css3/background"
@import "bourbon/functions/render-gradients"
@import "bourbon/functions/linear-gradient"
@import "clearfix"
@import "responsive"

// Grid inspired by Zurb's Foundation

// Defaults
// --------

// Calculate pixel grid @ http://gridulator.com/
$grid-medium: 980px         !default
$grid-large:  1200px        !default

$grid-total-columns: 10     !default
$grid-gutter: 20px          !default
$grid-baseline: 20px        !default

$grid-col-medium: ($grid-medium  - (($grid-total-columns - 1) * $grid-gutter)) / $grid-total-columns   !default
$grid-col-large:  ($grid-large   - (($grid-total-columns - 1) * $grid-gutter) / $grid-total-columns)   !default

$grid-column: $grid-col-medium  !default

$grid-guides-color: red     !default
$grid-guides: false         !default
$grid-guides-position: back !default


// Functions
// ---------

// Override Bourbon's function to add optional second argument of column width (useful for responsive design)
// Calculate column width: <span columns>, <column width>px
@function grid-width($n, $width: $grid-column, $gutter: $grid-gutter)
  @return $n * $width + ($n - 1) * $gutter

// Borrowed from Zurb's Foundation
@function number-to-word($num)
  $count: 1
  @each $word in one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, twentyone, twentytwo,twentythree,twentyfour
    @if ($count == $num)
      @return $word
    $count: $count + 1
  @return "invalid"


// Mixins
// ------

=grid-row
  +clearfix
  width: $grid-medium
  margin:
    left: auto
    right: auto

=grid-column($position: normal)
  @if $position == last
    float: right
    margin-right: 0
  @else if $position == end
    float: left
    margin-right: 0
  @else if $position == centered
    float: none
    margin:
      left: auto
      right: auto
  @else
    min-height: 1px
    float: left
    margin-right: $grid-gutter

=grid-offset-by-column($span: 1, $direction: left)
  margin-#{$direction}: grid-width($span) + $grid-gutter

=grid-column-width($span: 1)
  width: grid-width($span)

=grid-show-guides
  +grid-guides($grid-column)

=grid-guides($col-width: $grid-column, $block-size: 9, $color: $grid-guides-color, $opacity: .8, $position: $grid-guides-position)
  position: relative
  &:before
    content: ""
    position: absolute
    width: 100%
    height: 100%
    $combined-width:  $grid-column + $grid-gutter
    $block-height: (($grid-baseline + 1) * $block-size) + $grid-baseline

    +background(linear-gradient(transparent $grid-baseline, rgba(white, $opacity/2) $grid-baseline), linear-gradient(left, fade-out($color, $opacity), fade-out($color, $opacity) $col-width, transparent $col-width, transparent $combined-width), linear-gradient(transparent ($block-height - $grid-baseline), fade-out(white, $opacity / 2) $grid-baseline), linear-gradient(fade-out($color, $opacity), fade-out($color, $opacity)))
    background-size: $combined-width $grid-baseline + 1, $combined-width ($grid-baseline * $block-size), $combined-width ($block-height + 1)
    background-repeat: repeat, repeat

    @if $position == back
      z-index: -1
